// RUN: %target-sil-opt -loop-rotate -looprotate-single-block-loop=true %s | %FileCheck %s
sil_stage canonical

import Builtin
import Swift

class Klass {

}

sil [ossa] @useKlass : $@convention(thin) (@guaranteed Klass) -> ()

sil [ossa] @klassIdentity : $@convention(thin) (@owned Klass) -> @owned Klass

sil [ossa] @increment : $@convention(thin) (Builtin.Int32) -> Builtin.Int32

// CHECK-LABEL: sil [ossa] @testLoopSimple : 
// CHECK: bb0(%0 : $Int32, %1 : @owned $Klass):
// CHECK:   cond_br {{.*}}, bb2, bb1
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'testLoopSimple'
sil [ossa] @testLoopSimple : $@convention(thin) (Int32, @owned Klass) -> (){
bb0(%0 : $Int32, %1: @owned $Klass):
  %2 = struct_extract %0 : $Int32, #Int32._value
  %one = integer_literal $Builtin.Int32, 1
  br bb1(%2 : $Builtin.Int32, %1 : $Klass)

bb1(%3 : $Builtin.Int32, %4: @owned $Klass):
  %f1 = function_ref @klassIdentity : $@convention(thin) (@owned Klass) -> @owned Klass
  %c1 = apply %f1(%4) : $@convention(thin) (@owned Klass) -> @owned Klass
  %f2 = function_ref @increment : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %c2 = apply %f2(%3) : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %5 = struct $Int32 (%c2 : $Builtin.Int32)
  %6 = builtin "cmp_eq_Word"(%5 : $Int32, %one : $Builtin.Int32) : $Builtin.Int1
  cond_br %6, bb3, bb2

bb2:
  br bb1(%c2 : $Builtin.Int32, %c1: $Klass)

bb3:
  destroy_value %c1 : $Klass
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @testLoopCopy : 
// CHECK: bb0(%0 : $Int32, %1 : @owned $Klass):
// CHECK:   cond_br {{.*}}, bb2, bb1
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'testLoopCopy'
sil [ossa] @testLoopCopy : $@convention(thin) (Int32, @owned Klass) -> (){
bb0(%0 : $Int32, %1: @owned $Klass):
  %2 = struct_extract %0 : $Int32, #Int32._value
  %one = integer_literal $Builtin.Int32, 1
  br bb1(%2 : $Builtin.Int32, %1 : $Klass)

bb1(%3 : $Builtin.Int32, %4: @owned $Klass):
  %f1 = function_ref @klassIdentity : $@convention(thin) (@owned Klass) -> @owned Klass
  %copy = copy_value %4 : $Klass
  destroy_value %4 : $Klass
  %c1 = apply %f1(%copy) : $@convention(thin) (@owned Klass) -> @owned Klass
  %f2 = function_ref @increment : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %c2 = apply %f2(%3) : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %5 = struct $Int32 (%c2 : $Builtin.Int32)
  %6 = builtin "cmp_eq_Word"(%5 : $Int32, %one : $Builtin.Int32) : $Builtin.Int1
  cond_br %6, bb3, bb2

bb2:
  br bb1(%c2 : $Builtin.Int32, %c1: $Klass)

bb3:
  destroy_value %c1 : $Klass
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @testLoopBorrow1 : 
// CHECK: bb0(%0 : $Int32, %1 : @owned $Klass):
// CHECK:   cond_br {{.*}}, bb2, bb1
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'testLoopBorrow1'
sil [ossa] @testLoopBorrow1 : $@convention(thin) (Int32, @owned Klass) -> (){
bb0(%0 : $Int32, %1: @owned $Klass):
  %2 = struct_extract %0 : $Int32, #Int32._value
  %one = integer_literal $Builtin.Int32, 1
  br bb1(%2 : $Builtin.Int32, %1 : $Klass)

bb1(%3 : $Builtin.Int32, %4: @owned $Klass):
  %f1 = function_ref @useKlass : $@convention(thin) (@guaranteed Klass) -> ()
  %borrow = begin_borrow %4 : $Klass
  %c1 = apply %f1(%borrow) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %borrow : $Klass
  %f2 = function_ref @increment : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %c2 = apply %f2(%3) : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %5 = struct $Int32 (%c2 : $Builtin.Int32)
  %6 = builtin "cmp_eq_Word"(%5 : $Int32, %one : $Builtin.Int32) : $Builtin.Int1
  cond_br %6, bb3, bb2

bb2:
  br bb1(%c2 : $Builtin.Int32, %4 : $Klass)

bb3:
  destroy_value %4 : $Klass
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @testLoopBorrow2 : 
// CHECK: bb0(%0 : $Int32, %1 : @owned $Klass):
// CHECK:   cond_br {{.*}}, bb2, bb1
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'testLoopBorrow2'
sil [ossa] @testLoopBorrow2 : $@convention(thin) (Int32, @owned Klass) -> () {
bb0(%0 : $Int32, %1: @owned $Klass):
  %2 = struct_extract %0 : $Int32, #Int32._value
  %one = integer_literal $Builtin.Int32, 1
  %borrow = begin_borrow %1 : $Klass
  br bb1(%2 : $Builtin.Int32, %borrow : $Klass)

bb1(%3 : $Builtin.Int32, %reborrow : @guaranteed $Klass):
  %f1 = function_ref @useKlass : $@convention(thin) (@guaranteed Klass) -> ()
  %c1 = apply %f1(%reborrow) : $@convention(thin) (@guaranteed Klass) -> ()
  %f2 = function_ref @increment : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %c2 = apply %f2(%3) : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %5 = struct $Int32 (%c2 : $Builtin.Int32)
  %6 = builtin "cmp_eq_Word"(%5 : $Int32, %one : $Builtin.Int32) : $Builtin.Int1
  cond_br %6, bb3, bb2

bb2:
  br bb1(%c2 : $Builtin.Int32, %reborrow : $Klass)

bb3:
  end_borrow %reborrow : $Klass
  destroy_value %1 : $Klass
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @testLoopBorrow3 : 
// CHECK: bb0(%0 : $Int32, %1 : @owned $Klass):
// CHECK:   cond_br {{.*}}, bb2, bb1
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'testLoopBorrow3'
sil [ossa] @testLoopBorrow3 : $@convention(thin) (Int32, @owned Klass) -> () {
bb0(%0 : $Int32, %1: @owned $Klass):
  %2 = struct_extract %0 : $Int32, #Int32._value
  %one = integer_literal $Builtin.Int32, 1
  %borrow = begin_borrow %1 : $Klass
  br bb1(%2 : $Builtin.Int32, %borrow : $Klass)

bb1(%3 : $Builtin.Int32, %reborrow1 : @guaranteed $Klass):
  %f1 = function_ref @useKlass : $@convention(thin) (@guaranteed Klass) -> ()
  %c1 = apply %f1(%reborrow1) : $@convention(thin) (@guaranteed Klass) -> ()
  %f2 = function_ref @increment : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %c2 = apply %f2(%3) : $@convention(thin) (Builtin.Int32) -> Builtin.Int32
  %5 = struct $Int32 (%c2 : $Builtin.Int32)
  %6 = builtin "cmp_eq_Word"(%5 : $Int32, %one : $Builtin.Int32) : $Builtin.Int1
  end_borrow %reborrow1 : $Klass
  %reborrow2 = begin_borrow %1 : $Klass
  cond_br %6, bb3, bb2

bb2:
  br bb1(%c2 : $Builtin.Int32, %reborrow2 : $Klass)

bb3:
  end_borrow %reborrow2 : $Klass
  destroy_value %1 : $Klass
  %res = tuple ()
  return %res : $()
}

