// RUN: %target-sil-opt -sil-inline-generics -enable-sil-verify-all -inline -partial-apply-lowering %s | %FileCheck %s --check-prefix=CHECK-SIL

import Builtin
import Swift
import SwiftShims


public protocol Observable {
  associatedtype Result
  func subscribe<T: Observer>(o: T) async -> ()
}
public protocol Observer {
  associatedtype Result
}

// CHECK-SIL-LABEL: sil hidden @witness_method : $@convention(thin) @async <S where S : Observable><O where O : Observer, S.Result == O.Result><T> (@in S, @in_guaranteed T) -> @owned @async @callee_guaranteed (@in O) -> () {
//       CHECK-SIL: bb0([[OBSERVABLE:%[^,]+]] : $*S, [[GENERIC:%[^,]+]] : $*T):
//       CHECK-SIL:   [[WITNESS_METHOD:%[^,]+]] = witness_method $S, #Observable.subscribe : <Self where Self : Observable><T where T : Observer> (Self) -> (T) async -> () : $@convention(witness_method: Observable) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()
//       CHECK-SIL:   [[THUNK:%[^,]+]] = function_ref @$s14witness_methodTw_ : $@convention(thin) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result><τ_2_0> (@in τ_1_0, @in_guaranteed τ_0_0, @convention(witness_method: Observable) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()) -> ()
//       CHECK-SIL:   [[THICK_FUNC:%[^,]+]] = partial_apply [callee_guaranteed] [[THUNK]]<S, O, T>([[OBSERVABLE]], [[WITNESS_METHOD]]) : $@convention(thin) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result><τ_2_0> (@in τ_1_0, @in_guaranteed τ_0_0, @convention(witness_method: Observable) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()) -> ()
//       CHECK-SIL:   return [[THICK_FUNC]] : $@async @callee_guaranteed (@in O) -> ()
// CHECK-SIL-LABEL: } // end sil function 'witness_method'

// CHECK-SIL-LABEL: sil private [thunk] [ossa] @$s14witness_methodTw_ : $@convention(thin) @async <S where S : Observable><O where O : Observer, S.Result == O.Result><T> (@in O, @in_guaranteed S, @convention(witness_method: Observable) @async <S where S : Observable><O where O : Observer, S.Result == O.Result> (@in O, @in_guaranteed S) -> ()) -> () {
//       CHECK-SIL: bb0([[OBSERVER:%[^,]+]] : $*O, [[OBSERVABLE:%[^,]+]] : $*S, [[WITNESS_METHOD:%[^,]+]] : $@convention(witness_method: Observable) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()):
//       CHECK-SIL:   [[RESULT:%[^,]+]] = apply [[WITNESS_METHOD]]<S, O>([[OBSERVER]], [[OBSERVABLE]]) : $@convention(witness_method: Observable) @async <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()
//       CHECK-SIL:   return [[RESULT]] : $()
// CHECK-SIL-LABEL: } // end sil function '$s14witness_methodTw_'
sil hidden @witness_method : $@async @convention(thin) <S where S : Observable><O where O : Observer, S.Result == O.Result><T> (@in S, @in_guaranteed T) -> @owned @async @callee_guaranteed (@in O) -> () {
bb0(%0 : $*S, %t: $*T):
  %1 = witness_method $S, #Observable.subscribe : $@async @convention(witness_method: Observable) <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()
  %2 = partial_apply [callee_guaranteed] %1<S, O>(%0) : $@async @convention(witness_method: Observable) <τ_0_0 where τ_0_0 : Observable><τ_1_0 where τ_1_0 : Observer, τ_0_0.Result == τ_1_0.Result> (@in τ_1_0, @in_guaranteed τ_0_0) -> ()
  return %2 : $@async @callee_guaranteed (@in O) -> ()
}
